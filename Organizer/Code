using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using wcerms.Data;

namespace wcerms.Pages.Organizer
{
    public class DashboardModel : PageModel
    {
        private readonly AppDbContext _context;

        public DashboardModel(AppDbContext context)
        {
            _context = context;
        }

        [BindProperty(SupportsGet = true)]
        public string Section { get; set; } = "Welcome";

        [BindProperty] public string EventName { get; set; } = "";
        [BindProperty] public DateTime EventDate { get; set; } = DateTime.Today;
        [BindProperty] public string? EventDescription { get; set; }

        [BindProperty] public string VenueName { get; set; } = "";
        [BindProperty] public string? VenueDetails { get; set; }

        [BindProperty] public string ResourceType { get; set; } = "";
        [BindProperty] public int Quantity { get; set; }

        public List<BookingViewModel>? MyBookings { get; set; }

        public void OnGet()
        {
            if (string.IsNullOrEmpty(Section))
                Section = "Welcome";

            if (Section == "MyBookings")
            {
                LoadBookings();
            }
        }

        public IActionResult OnPostCreateEvent()
        {
            if (!ModelState.IsValid)
            {
                TempData["Message"] = "Invalid input!";
                return Page();
            }

            var newEvent = new Event
            {
                Title = EventName,
                Description = EventDescription,
                start_datetime = EventDate,
                end_datetime = EventDate.AddHours(2), 
                organizer_id = _context.Users.FirstOrDefault() 
            };

            _context.Events.Add(newEvent);
            _context.SaveChanges();

            TempData["Message"] = $"Event '{EventName}' created successfully!";
            return RedirectToPage("/Organizer/Dashboard", new { Section = "CreateEvent" });
        }

        public IActionResult OnPostRequestVenue()
        {
            var venue = new Venue
            {
                Name = VenueName,
                Details = VenueDetails,
                Capacity = 0,
                Location = "TBD"
            };

            _context.Venues.Add(venue);
            _context.SaveChanges();

            TempData["Message"] = $"Venue '{VenueName}' request submitted!";
            return RedirectToPage("/Organizer/Dashboard", new { Section = "RequestVenue" });
        }

        public IActionResult OnPostRequestResources()
        {
            var resource = new Resource
            {
                ResourceType = ResourceType,
                ResourceName = $"{ResourceType} Request",
                Quantity = Quantity
            };

            _context.Resources.Add(resource);
            _context.SaveChanges();

            TempData["Message"] = $"Resource request for '{ResourceType}' submitted!";
            return RedirectToPage("/Organizer/Dashboard", new { Section = "RequestResources" });
        }

        private void LoadBookings()
        {
            MyBookings = (from b in _context.Bookings
                          join e in _context.Events on b.EventId equals e.EventId
                          join v in _context.Venues on b.VenueId equals v.VenueId
                          select new BookingViewModel
                          {
                              EventName = e.Title,
                              VenueName = v.Name,
                              Date = b.Date,
                              Status = b.Status
                          }).ToList();
        }

        public class BookingViewModel
        {
            public string EventName { get; set; } = "";
            public string VenueName { get; set; } = "";
            public DateTime Date { get; set; }
            public string Status { get; set; } = "";
        }

    }
}

